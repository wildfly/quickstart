# setup from cli.*.properties
set remoteDeploymentName=${remoteDeploymentName}
set remoteServerHost=${remoteServerHost}
set remoteServerPort=${remoteServerPort}
set remoteServerUsername=${remoteServerUsername}
set remoteServerPassword=${remoteServerPassword}
set serverConfig=${serverConfig}

# It is assumed that in case one of the system properties exists then this script was already executed
if (outcome != success) of /system-property=remote.server.host:read-resource

    /system-property=remote.server.host:add(value=$remoteServerHost)
    /system-property=remote.server.port:add(value=$remoteServerPort)
    /system-property=remote.server.username:add(value=$remoteServerUsername)
    /system-property=remote.server.password:add(value=$remoteServerPassword)
    /system-property=remote.deployment.name:add(value=$remoteDeploymentName)

    echo "System properties defined"

    /socket-binding-group=standard-sockets/remote-destination-outbound-socket-binding=server2:add(host=${remote.server.host}, port=${remote.server.port})

    echo "Outbound socket binding 'server2' created"

    # adding password realm where secret is password 'quickstartUser' converted to base64 format
    # reload # when would be run not in embed mode

    /subsystem=elytron/authentication-configuration=auth_config:add(authentication-name=quickstartUser,authorization-name=quickstartUser, credential-reference={clear-text=quickstartPwd1!}, realm="ApplicationRealm", sasl-mechanism-selector="DIGEST-MD5")
    /subsystem=elytron/authentication-context=auth_context:add(match-rules=[{authentication-configuration=auth_config}])

    /subsystem=remoting/remote-outbound-connection=remote-ejb-connection:add(outbound-socket-binding-ref=server2, authentication-context=auth_context)
    /subsystem=remoting/remote-outbound-connection=remote-ejb-connection/property=SASL_POLICY_NOANONYMOUS:add(value=false)
    /subsystem=remoting/remote-outbound-connection=remote-ejb-connection/property=SSL_ENABLED:add(value=false)
    /subsystem=remoting/remote-outbound-connection=remote-ejb-connection/property=SASL_DISALLOWED_MECHANISMS:add(value=JBOSS-LOCAL-USER)

    echo "Remote outbound connection 'remote-ejb-connection' created"

    # for transaction manager could be asked for recovery to be started the listener at port has to be enabled (JVM restart needed)
    /subsystem=transactions:write-attribute(name=recovery-listener,value=true)
    echo "Transaction recovery listener enabled"
    # the recovery listener is normally bound at port 4712, you can verify it with:
    # /socket-binding-group=standard-sockets/socket-binding=txn-recovery-environment:read-attribute(name=bound-port)
    # for recovery invocation you can use e.g.: `telnet localhost 4712`; enter 'SCAN' on input

    # to get detailed insight on what happening during transaction processing switch on the TRACE logging for Narayana
    # /subsystem=logging/logger=com.arjuna:write-attribute(name=level,value=TRACE)

    echo "remoting-configuration.cli script finished"

end-if

quit
